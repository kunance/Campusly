/*jslint node: true */
"use strict";
/*------------------------------------------------------------------------------------

DO NOT EDIT THIS FILE !!! It is generated automatically and will be overwritten.

To modify this model:
1. Create 'lease-custom.js' file in this directory.
2. Copy the code below and paste it into 'lease-custom.js'.
3. Use utility methods to easily access orm properties.

"use strict";
var orm     = require('model\index.js'),
    model   = require('./lease.js'),
    util    = require('./utils.js')(model),
    Seq     = orm.Sequelize();

module.exports = model;

// Some utility methods:
util.getRelation("ids").onDelete = 'CASCADE'; 
util.getAttribute("id").comment = 'This is the comment'; 

------------------------------------------------------------------------------------*/
var orm = require('../index.js'),
    Seq = orm.Sequelize();
module.exports = {
    modelName: "rented.lease",
    options: {
        tableName: "lease",
        schema: "rented",
        timestamps: false
    },
    attributes: {
        "id": {
            type: Seq.BIGINT,
            field: "id",
            primaryKey: true,
            autoIncrement: true,
            allowNull: false,
            unique: "lease_pkey"
        },
        "propertyId": {
            type: Seq.BIGINT,
            field: "propertyId",
            allowNull: false,
            references: "property",
            referencesKey: "propertyId"
        },
        "approved": {
            type: Seq.BOOLEAN,
            field: "approved"
        },
        "startDate": {
            type: Seq.DATE,
            field: "startDate",
            allowNull: false
        },
        "endDate": {
            type: Seq.DATE,
            field: "endDate",
            allowNull: false
        },
        "paymentAmount": {
            type: Seq.FLOAT(53),
            field: "paymentAmount",
            allowNull: false
        },
        "paymentInterval": {
            type: Seq.CHAR(255),
            field: "paymentInterval",
            allowNull: false
        },
        "securityDeposit": {
            type: Seq.FLOAT(53),
            field: "securityDeposit"
        },
        "petDeposit": {
            type: Seq.FLOAT(53),
            field: "petDeposit"
        },
        "payee": {
            type: Seq.STRING(45),
            field: "payee"
        },
        "built": {
            type: Seq.DATE,
            field: "built"
        },
        "createdAt": {
            type: Seq.DATE,
            field: "createdAt",
            allowNull: false
        },
        "updatedAt": {
            type: Seq.DATE,
            field: "updatedAt"
        },
        "deletedAt": {
            type: Seq.DATE,
            field: "deletedAt"
        }
    },
    relations: [{
        type: "hasMany",
        model: "rented.lessee",
        schema: "rented",
        table: "lessee",
        source: "generator",
        details: {
            as: "ids",
            foreignKey: "leaseId",
            onDelete: "NO ACTION",
            onUpdate: "NO ACTION"
        }
    }, {
        type: "belongsTo",
        model: "rented.property",
        schema: "rented",
        table: "property",
        source: "generator",
        details: {
            as: "relatedPropertyId",
            foreignKey: "propertyId",
            onDelete: "NO ACTION",
            onUpdate: "NO ACTION"
        }
    }, {
        type: "belongsToMany",
        model: "rented.rentedUser",
        schema: "rented",
        table: "rented_user",
        source: "generator",
        details: {
            as: "relatedIdUserIds",
            foreignKey: "leaseId",
            otherKey: "userId",
            through: "lessee",
            onDelete: "NO ACTION",
            onUpdate: "NO ACTION"
        }
    }]
};